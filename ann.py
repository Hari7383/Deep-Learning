# -*- coding: utf-8 -*-
"""ann.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gDwHNBZ3abYytnbrHC1kcaK4zLlv0SyW
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
import tensorflow as tf
from tensorflow import keras
from sklearn.preprocessing import LabelEncoder
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.utils import to_categorical

data = pd.read_csv('ann_dataset.csv')
data.drop('customerID', axis=1, inplace=True)

le = LabelEncoder()
for x in data.columns:
  if data[x].dtype == 'object':
    data[x] = le.fit_transform(data[x])

data

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
data['TotalCharges'] = sc.fit_transform(data[['TotalCharges']])
data['MonthlyCharges'] = sc.fit_transform(data[['MonthlyCharges']])

data['tenure'] = sc.fit_transform(data[['tenure']])

data

x_train, x_test, y_train, y_test = train_test_split(data.drop('Churn', axis=1), data['Churn'], test_size=0.2, random_state=42)

model = keras.Sequential(
    [
        keras.layers.Dense(512, activation="relu", input_shape=[x_train.shape[1]]),
        keras.layers.Dense(256, activation="relu"),
        keras.layers.Dense(128, activation="relu"),
        keras.layers.Dense(64, activation="relu"),
        keras.layers.Dense(32, activation="relu"),
        keras.layers.Dense(16, activation="relu"),
        keras.layers.Dense(8, activation="relu"),
        keras.layers.Dense(4, activation="relu"),
        keras.layers.Dense(2, activation="relu"),
        keras.layers.Dense(1, activation="sigmoid"),
    ]
)
model.compile(optimizer="adam", loss="binary_crossentropy", metrics=["accuracy"])
model.fit(x_train, y_train, epochs=50, batch_size=32, validation_split=0.2)

model.evaluate(x_test, y_test)

y_pred = model.predict(x_test)
for i in range(len(y_pred)):
  if y_pred[i] > 0.5:
    y_pred[i] = 1
  else:
    y_pred[i] = 0

y_pred[3]

cm = tf.math.confusion_matrix(labels=y_test, predictions=y_pred)
cm

import seaborn as sns
plt.figure(figsize=(10,7))
sns.heatmap(cm,annot=True,fmt='d')
plt.xlabel('Predicted')
plt.ylabel('Truth')